import osimport reimport argparseimport datetimefrom pathlib import PathIGNORE_PATTERNS = r"(\.git|node_modules|deprecated|scripts|.svelte-kit|eai|runs|.venv|third_party|tests)"FILE_EXTENSIONS = ("Makefile", ".py")def is_ignored(file_path):    return re.search(IGNORE_PATTERNS, file_path)def generate_source_file(input_folder: Path, output_file: Path):    with output_file.open("w", encoding="utf-8") as source_file:        for root, _, files in os.walk(input_folder):            for file_name in files:                if file_name.endswith(FILE_EXTENSIONS):                    file_path = Path(root) / file_name                    relative_path = os.path.relpath(file_path, start=input_folder)                    if not is_ignored(relative_path):                        source_file.write(f"{relative_path}\n{file_path.read_text(encoding='utf-8')}\n\n")if __name__ == "__main__":    parser = argparse.ArgumentParser(description="Generate a source file by recursively scanning folders.")    parser.add_argument("--input-folder", default=os.getcwd(), help="Input folder (default: current directory)")    args = parser.parse_args()    input_folder = Path(args.input_folder)    output_file = input_folder / f"source_{datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S').upper()}.txt"    try:        generate_source_file(input_folder, output_file)        print(f"Source file '{output_file}' generated successfully.")    except Exception as e:        print(f"Error: {e}")