[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "paper-planner-backend"
version = "0.1.0"
description = "Backend for paper planning and scheduling tool"
requires-python = ">=3.8"
dependencies = [
    "dash>=2.14.0",
    "plotly>=5.15.0",
    "python-dateutil>=2.8.0",
    "pydantic>=2.0.0",
    "sqlmodel>=0.0.8",
    
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pulp>=2.7.0"
]

[project.optional-dependencies]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.1.0",
    "pytest-asyncio>=0.21.0",
    "playwright"
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.pylint]
extension-pkg-allow-list = ["cv2", "numpy", "dateutil"]
ignore = ["__pycache__"]

[tool.pylint.messages_control]
disable = [
  "invalid-name",
  "missing-module-docstring",
  "missing-function-docstring",
  "missing-class-docstring",
  "no-member",
  "unpacking-non-sequence",
  "multiple-statements",
  "redefined-outer-name",
  "broad-exception-caught",
  "unused-import",
  "import-outside-toplevel",
  "multiple-imports",
  "no-name-in-module",
  "import-error",
  "missing-final-newline",   # ignore C0304
  "trailing-whitespace",     # ignore C0303
  "attribute-defined-outside-init",  # ignore W0201 - allows inherited attributes
  "protected-access",        # ignore W0212 - allows access to protected methods
  "undefined-variable"       # ignore E0602 - allows undefined variable errors for imports
]

[tool.pylint.typecheck]
generated-members = [
  "cv2.*",
  "cv2.aruco.*"
]

# Better handling of inherited methods
ignored-modules = []
ignored-classes = []

[tool.pylint.format]
max-line-length = 250

[tool.pyright]
# stop errors about stub‐only or C‐extension modules
reportMissingModuleSource = false
reportMissingImports = false

# your existing venv and Python version settings
venvPath = ".."
venv = ".venv"
pythonVersion = "3.12"

# Configure source paths for backend and frontend access
analysis.extraPaths = ["src", "../frontend/app"]

# have Pyright/Pylance use library code for types
analysis.useLibraryCodeForTypes = true

# Better inheritance handling
analysis.autoImportCompletions = true
analysis.typeCheckingMode = "basic"
analysis.autoSearchPaths = true

# Ignore specific inheritance-related errors
reportUnknownVariableType = false

# Plotly-specific type checking rules
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownParameterType = false
reportMissingTypeStubs = false

# Ignore Plotly's incomplete type annotations
reportGeneralTypeIssues = false

# Ignore Plotly's dynamic attribute access issues
reportUnknownMemberType = false
reportUnknownAttributeType = false
reportAttributeAccessIssue = false

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src", "tests", "../frontend/app"]
addopts = "-v --tb=short --import-mode=importlib"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.pytest-timeout]
timeout = 60
timeout_method = "thread"
